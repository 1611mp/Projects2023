# -*- coding: utf-8 -*-
"""SimpleSmsSpamFilter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZuNFzSsTIF-ZrWrE0X_TV1akQAg8Ia1t
"""

# Connect to google drive
from google.colab import drive
drive.mount('/content/drive')

data_file = '/content/drive/My Drive/Spam Filter/spam.csv'

import pandas as pd
data = pd.read_csv(data_file,encoding ='latin',usecols =['v1','v2'],sep = ',')
data.head

import string
import nltk

nltk.download('stopwords')
nltk.download('punkt')

stopwords= nltk.corpus.stopwords.words('english')
punctuation = string.punctuation

print(stopwords[:5])
print(punctuation)

# pre-process sms content

def pre_process(v2):
  lowercase = "".join([char.lower()for char in v2 if char not in punctuation])
  tokenize = nltk.tokenize.word_tokenize(lowercase)
  remove_stopwords = [word for word in tokenize if word not in stopwords]

  return remove_stopwords
data['processed'] = data['v2'].apply(lambda x:pre_process(x))
data.head()

# categorize ham/spam associated words

def categorize_words():
  spam_words = []
  ham_words = []

  # spam associated words
  for v2 in data['processed'] [data['v1']=='spam']:
    for word in v2:
      spam_words.append(word)
  
  # ham associated words
  for v2 in data['processed'] [data['v1']=='ham']:
    for word in v2:
      ham_words.append(word)

  return spam_words, ham_words
spam_words,ham_words = categorize_words()

print(spam_words[:5])
print(ham_words[:5])

def predict(user_input):
  spam_counter = 0
  ham_counter = 0
  for word in user_input:
    spam_counter += spam_words.count(word)
    ham_counter += ham_words.count(word)

  print("******************Result********************")

  if ham_counter > spam_counter:
    accuracy = round((ham_counter/(ham_counter+spam_counter))*100,2)
    print("message is not spam, with {}% accuracy.".format(accuracy))
  elif spam_counter > ham_counter:
    accuracy = round((spam_counter/(ham_counter+spam_counter))*100,2)
    print("message is not spam, with {}% accuracy.".format(accuracy))
  else:
    print("message could be spam, with 50% accuracy")

#collect user input

user_input = input("Please enter type of a spam or ham message\n")
processed_input = pre_process(user_input)
predict(processed_input)

